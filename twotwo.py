import unittest


# https://www.hackerrank.com/challenges/two-two/


def twoTwo(a):
    res = 0
    for length in range(1, len(a) + 1):
        for index in range(0, len(a) - length + 1):
            if a[index] == "0":
                continue
            number = int(a[index : index + length])
            if number != 0 and number & (number - 1) == 0:
                res += 1
    return res


class TestStringMethods(unittest.TestCase):
    def test_a(self):
        self.assertEqual(twoTwo("2222222"), 7)

    def test_b(self):
        self.assertEqual(twoTwo("24256"), 4)

    def test_c(self):
        self.assertEqual(twoTwo("65536"), 1)

    def test_d(self):
        self.assertEqual(twoTwo("023223"), 4)

    def test_e(self):
        self.assertEqual(twoTwo("33579"), 0)

    def test_f(self):
        self.assertEqual(twoTwo("10"), 1)

    def test_g(self):
        self.assertEqual(
            twoTwo(
                "1524291284333980581729295522359944485228807686848130444755447734192076044345588681699368214386470689042884243711624327585667956874652483059712111387710391166875455106728654792268674151086602748045180156067331525272636930600256492011995053012689908259511074082209733610955111705029254215364251030619830370963729498656007882670709145612842128665889583757912572956250314124878759284236264305415724861007646861076857475863443692083956179753376388809028851838426348267050302400214391529911818481335995290840929194803866596397272258963118290370563450873173395281893717377931138512726225554486085193277581262111899648143965241425382284249937232245951419483830307785661332259224178323578802581487611850209301955324507428797469140272668643942664513775817590048272485787685243364311042338402619729444669125895732346052831449492068761614536774485912137810986476157760090687072827213746361205629803983612785762267958466523821014275271311215250432125323558670692032572293121180591620717411303424439804651110412816"
            ),
            484,
        )

    def test_h(self):
        self.assertEqual(
            twoTwo(
                "1684996666696914987166688442938726917102321526408785780068975640576573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656370534685559411825355427152027801305130463950930049804926264268825322014847795232768948568795032094272909893509191171341133987714380927500611236528192824358010355712327682074757784440496479256203931845580575506223116121218449997828664845326405706454073199853524473551897144098943305650394591197575537705887653943437417056981843530590901700754761842688463168356949264781694283940034751631413079938662562256157830336031652518559744439347050248359021758841651141209165905243859209171546201245661387874763737449987335843817002333091518546963929054774914375807231981865204004737810631363657728207475778444049647925620393184558057550622311612121844999782866484532640570645407319985352447355189714409894330565039459119757553770588765394343741705698184353059090170075476184268810384593717069655257060992658440192655361152921504606846976"
            ),
            435,
        )


if __name__ == "__main__":
    unittest.main()
